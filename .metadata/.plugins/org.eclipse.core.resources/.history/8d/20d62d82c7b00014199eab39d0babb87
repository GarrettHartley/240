package hangman;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

public class EvilHangmanGame implements IEvilHangmanGame {
	Set<String> words;
	String currW;
	Set<String> guessedL;
	Set<String> keys;
	
	public EvilHangmanGame(){
		words = new TreeSet<String>();
		currW  = new String();
		guessedL = new TreeSet<String>();
		keys= new TreeSet<String>();
	}
	
	@Override
	public void startGame(File dictionary, int wordLength) {
		Scanner scanner = null;
		try {
			scanner = new Scanner(new File(dictionary.getAbsolutePath()));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		while(scanner.hasNext()){
			String inputWord = new String();
			words.add(inputWord);
		}
		
		for(int i =0;i<wordLength;i++){
			currW = currW+"_";
		}
		
		
	}
	
	public String makeKey(String str){
		String strKey = new String();
		
		for(String c:guessedL){
			if(strKey.contains(c)!=true){
				strKey.replace(c, "_");
			}
		}

		return strKey;
	}

	@Override
	public Set<String> makeGuess(char guess) throws GuessAlreadyMadeException {
		
		//create partitions
		Map<String,Set<String>> pdictionary = new TreeMap<String,Set<String>>();
		guessedL.add(Character.toString(guess));
		for(String str: words){
			String strKey = new String(makeKey(str));
			if(pdictionary.containsKey(strKey)==false){
				Set<String> newValues = new TreeSet<String>();
				newValues.add(str);
				pdictionary.put(strKey,newValues);
			}
			else if(pdictionary.containsKey(strKey)==true){
				Set<String> newValues = new TreeSet<String>(pdictionary.get(strKey));
				newValues.add(str);
				pdictionary.put(strKey, newValues);
			}
		}

		pdictionary.toString();
		//select partitions
		
		
		
		return null;
	}

}
